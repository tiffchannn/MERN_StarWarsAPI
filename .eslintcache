[{"/Users/tiffanychan/Desktop/CodingDojo/MERN/React/luke_api_walker/src/index.js":"1","/Users/tiffanychan/Desktop/CodingDojo/MERN/React/luke_api_walker/src/reportWebVitals.js":"2","/Users/tiffanychan/Desktop/CodingDojo/MERN/React/luke_api_walker/src/App.js":"3","/Users/tiffanychan/Desktop/CodingDojo/MERN/React/luke_api_walker/src/components/Search.js":"4","/Users/tiffanychan/Desktop/CodingDojo/MERN/React/luke_api_walker/src/components/DisplaySearch.js":"5"},{"size":500,"mtime":1610567563468,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1610567563469,"results":"8","hashOfConfig":"7"},{"size":578,"mtime":1610599634663,"results":"9","hashOfConfig":"7"},{"size":3648,"mtime":1610599555707,"results":"10","hashOfConfig":"7"},{"size":1060,"mtime":1610598898898,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b8yjns",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/tiffanychan/Desktop/CodingDojo/MERN/React/luke_api_walker/src/index.js",[],"/Users/tiffanychan/Desktop/CodingDojo/MERN/React/luke_api_walker/src/reportWebVitals.js",[],"/Users/tiffanychan/Desktop/CodingDojo/MERN/React/luke_api_walker/src/App.js",["25"],"/Users/tiffanychan/Desktop/CodingDojo/MERN/React/luke_api_walker/src/components/Search.js",["26","27"],"import React, {useState, useEffect} from 'react';\nimport {navigate} from '@reach/router';\nimport axios from 'axios';\n\nconst Search = ({result, setResult}) => {\n  const [error, setError] = useState(\"\");\n  const [fetching, setFetching] = useState(false)\n  const [category, setCategory] = useState(\"\")\n  const [searchID, setSearchID] = useState(\"\")\n  const [blinking, setBlinking] = useState(false)\n\n  // Set blinking errors\n  useEffect(() => {\n    setTimeout(() => {\n      setBlinking(!blinking)\n    }, 250)\n  }, [blinking])\n\n  const handleSearchChange = (e) => {\n    // this event handler will be used to grab the search category and store in state\n    e.preventDefault();\n    console.log('Event Target from Category: ', e.target.value)\n    setCategory(e.target.value)\n  };\n\n  const handleInputChange =(e) => {\n  // grab the ID input and setInput\n    e.preventDefault();\n    console.log('Event Target from ID Input: ', e.target.value)\n    setSearchID(e.target.value)\n  }\n\n  useEffect(() => {\n    if (fetching) {\n      axios.get(`https://swapi.dev/api/${category}/${searchID}`)\n      .then(response => {\n        setResult(response.data)\n        setFetching(false)\n      }).catch(err => {\n        setError(\"These aren't the droids you're looking for!\")\n        setResult(null)\n      })\n\n\n      console.log('Done fetching!')\n      navigate(`/${category}/${searchID}`);\n    }\n  }, [fetching])\n\n  const handleClick = (e) => {\n    // bring in SW API here?\n    // https://swapi.dev/api/ + category + id\n    // when form is submitted, through onClick ...\n      // fetch from API and search for corresponding category AND id\n        // after fetch, display the right info & change path to match the search items\n\n    // useEffect(() => {\n      // axios.get(`https://swapi.dev/api/${category}/${searchID}`)\n      // .then(response => setResult(response.data))\n      // // .then(console.log)\n      // // .catch(err => setErroror(\"These aren't the droids you're looking for!\")\n\n\n      // console.log('Done fetching!')\n      // navigate(`/${category}/${searchID}`);\n    // }, []);\n    setFetching(true)\n  }\n  console.log('Result', result)\n  // console.log(typeof result)\n\n  const displayError = () => {\n    if (error) {\n      return (\n        <div>\n          <img src=\"/obiwan.jpg\" style={{ width: 1000, padding: 25 }}/>\n          <p style={{\n            color: \"red\",\n            fontSize: 42,\n            fontWeight: \"bold\",\n            fontStyle: \"italic\",\n            textTransform: \"uppercase\",\n            visibility: blinking ? \"visible\" : \"hidden\"\n          }}>{error}</p>\n        </div>\n      )\n    } else {\n      return null\n    }\n  }\n\n  return(\n    <>\n      <form className=\"form-inline-block\">\n        <div></div>\n        <label htmlFor=\"search\" className=\"search-field-label\" >Search For: </label>\n        <select id=\"search\" className=\"search-field\" name=\"search\" onChange={handleSearchChange} value={category}>\n          <option value=\"\"></option>\n          <option value=\"films\" defaultValue>Films</option>\n          <option value=\"people\">People</option>\n          <option value=\"planets\">Planets</option>\n          <option value=\"spaceships\">Spaceships</option>\n          <option value=\"species\">People</option>\n          <option value=\"vehicles\">Vehicles</option>\n        </select>\n        <label className=\"ID-label\" htmlFor=\"ID\">ID: </label>\n        <input type=\"text\" className=\"ID-search-field\" name=\"searchID\" onChange={handleInputChange} value={searchID}></input>\n        <button type=\"button\" className=\"btn btn-warning\" onClick={handleClick}>Search</button>\n      </form>\n      {displayError()}\n    </>\n\n  );\n};\n\nexport default Search;",["28","29"],"/Users/tiffanychan/Desktop/CodingDojo/MERN/React/luke_api_walker/src/components/DisplaySearch.js",["30","31","32"],"import React from 'react';\nimport Search from './Search';\n\nconst DisplaySearch = ({result}) => {\n  if (result === null) return null\n  // const {result} = props.result;\n  const resultTitleArr = Object.keys(result)\n  // console.log(\"Results Array:\", resultTitleArr);\n\n\n  return (\n    <>\n      {/* <Search /> */}\n      <div>\n        {\n          Object.keys(result).map((key, i) => (\n            <p key={i}>\n              <span className=\"name\">{key} </span>: {result[key]}\n            </p>\n          ))\n        }\n\n        {/* <h2>{result.name}</h2>\n        <h5>Height: {result.height}</h5>\n        <h5>Mass: {result.mass}</h5>\n        <h5>Hair Color: {result.hair_color}</h5>\n        <h5>Skin Color:{result.skin_color}</h5> */}\n      </div>\n\n    </>\n  );\n};\n\nexport default DisplaySearch;\n\n// {result.map((item, i) => (\n//   <p className=\"name\" key={i}> {item.name}</p>\n// ))}\n\n// For displaying all results from the API Call\n{/* {resultTitleArr}\n\n    {Object.keys(result).map((item, i) => (\n        <h2 key={i}>\n          {result[item]}\n        </h2>\n    ))} */}",{"ruleId":"33","severity":1,"message":"34","line":14,"column":9,"nodeType":"35","endLine":14,"endColumn":63},{"ruleId":"36","severity":1,"message":"37","line":48,"column":6,"nodeType":"38","endLine":48,"endColumn":16,"suggestions":"39"},{"ruleId":"33","severity":1,"message":"34","line":76,"column":11,"nodeType":"35","endLine":76,"endColumn":72},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":14},{"ruleId":"44","severity":1,"message":"48","line":7,"column":9,"nodeType":"46","messageId":"47","endLine":7,"endColumn":23},{"ruleId":"49","severity":1,"message":"50","line":41,"column":1,"nodeType":"51","messageId":"52","endLine":47,"endColumn":12},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'category', 'searchID', and 'setResult'. Either include them or remove the dependency array. If 'setResult' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["53"],"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'Search' is defined but never used.","Identifier","unusedVar","'resultTitleArr' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",{"desc":"56","fix":"57"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [category, fetching, searchID, setResult]",{"range":"58","text":"59"},[1376,1386],"[category, fetching, searchID, setResult]"]